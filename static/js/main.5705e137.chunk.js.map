{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","Search","placeholder","handleChange","type","onChange","App","e","setState","search","target","value","state","fetch","then","res","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iUAGaA,EAAO,SAACC,GAAD,OAChB,sBAAKC,UAAU,iBAAf,UACI,qBACIC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BACP,mCAAOL,EAAMI,QAAQE,KAArB,OACA,4BAAKN,EAAMI,QAAQG,YCJdC,EAAW,SAACR,GACrB,OAAM,qBAAKC,UAAU,YAAf,SACLD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAyBA,QAAUA,GAAvBA,EAAQC,UCLfM,G,MAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OAClB,uBACIZ,UAAU,SACVa,KAAK,SACLF,YAAcA,EACdG,SAAWF,MC0CJG,G,wDA1Cb,aAAe,IAAD,8BACZ,gBAgBFH,aAAe,SAAAI,GACb,EAAKC,SAAS,CAAEC,OAAQF,EAAEG,OAAOC,SAfjC,EAAKC,MAAQ,CACXb,SAAU,GACVU,OAAQ,IALE,E,qDAWd,WAAqB,IAAD,OAClBI,MAAM,8CAA8CC,MAAK,SAAAC,GAAG,OAC1DA,EAAIC,UAAQF,MAAK,SAAAG,GAAK,OACpB,EAAKT,SAAS,CAAET,SAAUkB,S,oBAOhC,WAAU,IAAD,EAEsBC,KAAKN,MAA1Bb,EAFD,EAECA,SAAUU,EAFX,EAEWA,OACZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAOY,kBAG7C,OACE,sBAAK9B,UAAU,MAAf,UACE,iDACA,cAAC,EAAD,CACEW,YAAY,iBACZC,aAAce,KAAKf,eAErB,cAAC,EAAD,CAAUJ,SAAWoB,W,GArCXI,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5705e137.chunk.js","sourcesContent":["import React from 'react'\r\nimport './card.styles.css'\r\n\r\nexport const Card = (props) => (\r\n    <div className='card-container'>\r\n        <img \r\n            alt=\"monster\"\r\n            src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\r\n        <h2> { props.monster.name } </h2>\r\n        <p>{ props.monster.email }</p>\r\n    </div>\r\n)","import React from 'react';\r\nimport './card-list.styles.css';\r\n\r\nimport { Card } from '../card/card.component';\r\n\r\nexport const CardList = (props) => {\r\n    return<div className='card-list'>\r\n    {props.monsters.map(monster => \r\n        <Card key={ monster.id } monster={ monster }/>)}\r\n    </div>\r\n}","import React from 'react';\r\nimport './search.styles.css';\r\n\r\nexport const Search = ({ placeholder, handleChange}) => (\r\n    <input\r\n        className='search'\r\n        type='search' \r\n        placeholder={ placeholder }\r\n        onChange={ handleChange }/>\r\n)","import React, { Component } from 'react'\nimport { CardList } from './components/card-list/card-list.component'\nimport { Search } from './components/search-box/search.component'\nimport './App.css';\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      search: ''\n    }\n    \n    // this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\").then(res => \n      res.json()).then(users => \n        this.setState({ monsters: users }));\n  }\n\n  handleChange = e => {\n    this.setState({ search: e.target.value });\n  }\n\n  render() {\n\n    const { monsters, search } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(search.toLowerCase())\n      );\n\n    return (\n      <div className='App'>\n        <h1>Monster Rolodex</h1>\n        <Search \n          placeholder='Search name...' \n          handleChange={this.handleChange}\n        />\n        <CardList monsters={ filteredMonsters }/>\n      </div>\n    );\n  }\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}